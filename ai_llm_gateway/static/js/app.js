console.log('üöÄ AI Trading Bot Dashboard loaded');

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª
function formatCurrency(value) {
    return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
    }).format(value);
}

function formatPercent(value) {
    return new Intl.NumberFormat('en-US', {
        style: 'percent',
        minimumFractionDigits: 1,
        maximumFractionDigits: 1
    }).format(value / 100);
}

// –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–æ–º
class SimpleDashboard {
    constructor() {
        this.init();
    }

    async init() {
        console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞...');
        await this.loadData();
        
        // –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            this.loadData();
        }, 5000);
    }

    async loadData() {
        try {
            await this.loadBalance();
            await this.loadPositions();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }

    async loadBalance() {
        try {
            const response = await fetch('/api/balance');
            if (!response.ok) throw new Error('API error');
            const data = await response.json();
            this.updateBalance(data);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
            this.showError('balance', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
        }
    }

    async loadPositions() {
        try {
            const response = await fetch('/api/positions');
            if (!response.ok) throw new Error('API error');
            const data = await response.json();
            this.updatePositions(data);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–π:', error);
            this.showError('positions', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–π');
        }
    }

    updateBalance(data) {
        console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:', data);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const elements = {
            'total-balance': formatCurrency(data.total_balance || 0),
            'available-balance': formatCurrency(data.available_balance || 0),
            'pnl-total': formatCurrency(data.pnl_total || 0),
            'pnl-today': formatCurrency(data.pnl_today || 0),
            'win-rate': formatPercent(data.win_rate || 0),
            'sharpe-ratio': (data.sharpe_ratio || 0).toFixed(2),
            'max-drawdown': formatPercent(data.max_drawdown || 0)
        };

        for (const [id, value] of Object.entries(elements)) {
            const element = document.getElementById(id);
            if (element) {
                element.textContent = value;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è —Ü–≤–µ—Ç–æ–≤
                if (id.includes('pnl')) {
                    const numValue = data[id.replace('-', '_')] || 0;
                    element.className = numValue >= 0 ? 'metric-value positive' : 'metric-value negative';
                }
                
                if (id === 'max-drawdown') {
                    const numValue = data.max_drawdown || 0;
                    element.className = numValue >= 0 ? 'metric-value positive' : 'metric-value negative';
                }
            }
        }
    }

    updatePositions(positions) {
        console.log('üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π:', positions);
        const container = document.getElementById('positions-container');
        if (!container) return;

        if (!positions || positions.length === 0) {
            container.innerHTML = '<div class="loading">üö´ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π</div>';
            return;
        }

        container.innerHTML = positions.map(position => `
            <div class="position-item">
                <div class="position-symbol">${position.symbol}</div>
                <div class="position-details">
                    <span>–†–∞–∑–º–µ—Ä: ${position.size}</span>
                    <span>–í—Ö–æ–¥: ${formatCurrency(position.entry_price)}</span>
                    <span>–¢–µ–∫—É—â–∞—è: ${formatCurrency(position.current_price)}</span>
                </div>
                <div class="position-pnl ${position.unrealized_pnl >= 0 ? 'positive' : 'negative'}">
                    PnL: ${formatCurrency(position.unrealized_pnl || 0)}
                </div>
            </div>
        `).join('');
    }

    showError(elementId, message) {
        const element = document.getElementById(elementId);
        if (element) {
            element.textContent = message;
            element.style.color = '#e74c3c';
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        new SimpleDashboard();
    });
} else {
    new SimpleDashboard();
}